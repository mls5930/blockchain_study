import Chain from "@core/chain/chain";
import Block from "@core/block/block";
import { GENESIS } from "@core/config";
import { DIFFICULTY_ADJUSTMENT_INTERVAL } from "@core/config";

describe("üß™ ÎÇúÏù¥ÎèÑ Ï°∞Ï†ï ÌùêÎ¶Ñ ÌÖåÏä§Ìä∏ - Îã®Í≥ÑÎ≥Ñ", () => {
  let chain: Chain;
  const data = ["tx"];

  beforeEach(() => {
    chain = new Chain();
  });

  it("1Îã®Í≥Ñ. ÏµúÏã† Î∏îÎ°ùÏùÑ Í∞ÄÏ†∏Ïò®Îã§", () => {
    const prev = chain.latestBlock();
    expect(prev).toEqual(GENESIS);
  });

  it("2Îã®Í≥Ñ. Ï°∞Ï†ï Í∏∞Ï§Ä Î∏îÎ°ù(adjustment)ÏùÑ ÏÑ§Ï†ïÌïúÎã§", () => {
    const i = 5;
    let adjustment: Block;
    
    if (i >= DIFFICULTY_ADJUSTMENT_INTERVAL) {
      const index = i - DIFFICULTY_ADJUSTMENT_INTERVAL;
      adjustment = chain.get()[index];
    } else {
      adjustment = GENESIS;
    }
  
    expect(adjustment).toEqual(GENESIS); // ÏïÑÏßÅ Î∏îÎ°ùÏù¥ Î∂ÄÏ°±ÌïòÎãàÍπå GENESISÍ∞Ä ÎÇòÏò¥
  });
  

  it("3Îã®Í≥Ñ. Î∏îÎ°ùÏùÑ ÏÉùÏÑ±ÌïòÍ≥† Ï≤¥Ïù∏Ïóê Ï∂îÍ∞ÄÌïúÎã§", () => {
    const prev = chain.latestBlock();
    const adjustment = GENESIS;
    const newBlock = Block.generateBlock(prev, data, adjustment);
    const added = chain.addToChain(newBlock);

    expect(chain.length()).toBe(2);
    expect(added).toEqual(newBlock);
    expect(added.previousHash).toBe(prev.hash);
  });

  it("4Îã®Í≥Ñ. Ï£ºÍ∏∞ÎßåÌÅº Î∏îÎ°ùÏùÑ Ï∂îÍ∞ÄÌïòÍ≥† ÎÇú ÌõÑ, Îã§Ïùå Î∏îÎ°ùÏùÑ ÏÉùÏÑ±ÌïúÎã§", () => {
    // DIFFICULTY_ADJUSTMENT_INTERVALÎßåÌÅº Î∏îÎ°ù ÏÉùÏÑ±
    for (let i = 1; i <= DIFFICULTY_ADJUSTMENT_INTERVAL; i++) {
      let adjustment: Block;

      const prev = chain.latestBlock();
      
      if (i >= DIFFICULTY_ADJUSTMENT_INTERVAL) {
        const index = i - DIFFICULTY_ADJUSTMENT_INTERVAL;
        adjustment = chain.get()[index];
      } else {
        adjustment = GENESIS;
      }

      const newBlock = Block.generateBlock(prev, data, adjustment);
      chain.addToChain(newBlock);
    }

    expect(chain.length()).toBe(DIFFICULTY_ADJUSTMENT_INTERVAL + 1); // Ï†úÎÑ§ÏãúÏä§ Ìè¨Ìï®
  });

  it("5Îã®Í≥Ñ. ÎÇúÏù¥ÎèÑÍ∞Ä Ï°∞Ï†ïÎêòÎäîÏßÄ ÌôïÏù∏ÌïúÎã§", () => {
    const prevBlock = chain.latestBlock();
    const adjustment = chain.get()[chain.length() - DIFFICULTY_ADJUSTMENT_INTERVAL];
    const nextBlock = Block.generateBlock(prevBlock, data, adjustment);

    expect(nextBlock.difficulty).not.toBe(prevBlock.difficulty);
  });
});
